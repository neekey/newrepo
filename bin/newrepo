#!/usr/bin/env node

//todo Forcing writing.

var program = require( 'commander' );
var mkdirp = require('mkdirp');
var fs = require( 'fs' );
var packageInfo = require( '../package.json' );
var Path = require( 'path' );
var Mustache = require( 'mustache' );
var DirReader = require( 'dirreader' );
var Debug = {
    file: require( 'debug' )( 'file' ),
    dir: require( 'debug' )( 'directory' ),
    error: require( 'debug' )( 'error' ),
    confirm: require( 'debug' )( 'confirm' )
};

// The directory that executing newrepo.
var newRepoBasePath = process.cwd() || '.';
// The template directory.
var templateDirPath = '../template';
var templateAbsoluteDirPath = Path.resolve( __dirname, templateDirPath );

program
    .version( packageInfo.version )
    .parse(process.argv);

var repoInfo = {
    name: 'undefined-repo',
    description: 'It\'s an simply repo.',
    author: '',
    email: '',
    version: '0.0.1'
};

program.prompt('RepoName: ', function(name){
    console.log('You repo name is "%s"', name);
    repoInfo.name = name;

    program.prompt('Description: ', function(desc){
        console.log('You repo description is "%s"', desc.trim());
        repoInfo.description = desc.trim();

        program.prompt('Author: ', function( author ){
            console.log('The author of this repo is "%s"', author );
            repoInfo.author = author;

            program.prompt('Email: ', function( email ){
                console.log('You email is "%s"', email);
                repoInfo.email = email;

                program.prompt('The initial version: ', function( version ){
                    console.log('You email is "%s"', email);
                    repoInfo.version = version;

                    process.stdin.destroy();
                    buildNewRepo();
                });
            });
        });
    });
});

/**
 * Build new repo directory
 */
function buildNewRepo(){

    // The new repo directory path.
    var targetRepoPath = Path.join( newRepoBasePath, repoInfo.name );
    console.log( 'Generating your new repo to %s...', targetRepoPath );

    // Copy template directory.
    DirReader.readDirSync( templateAbsoluteDirPath, function( err, path, stats, ifDir ){

        var relativePath = path.replace( templateAbsoluteDirPath, '');
        var newPath = Path.join( targetRepoPath, relativePath );

        if( ifDir ){

            try {
                mkdirp.sync( newPath );
            }
            catch( err ){

                throw new Error( 'A error occurred when making directory: ' + newPath );
            }
        }
        else {

            try{
                var buff = fs.readFileSync( path );
            }
            catch( err ){
                throw new Error( 'A error occurred when reading template file: ' + path );
            }

            // Create new file
            if( Path.extname( newPath ) === '.mustache' ){

                // Use mustache to render.
                buff = buff.toString( 'utf8' );
                buff = Mustache.render( buff, repoInfo );
                // Remove `.mustache`
                newPath = newPath.replace( /.mustache$/, '' );
            }

            // If the file name include mustach template
            if( /{{.*}}/.test( Path.basename( newPath ) ) ){

                newPath = Mustache.render( newPath, repoInfo );
            }

            try{
                fs.writeFileSync( newPath, buff );
            }
            catch( err ){
                throw new Error( 'A error occurred when writing file to your repo: ' + newPath );
            }
        }

        console.log( ( ifDir ? '[ Directory ] ' : '[ File ] ') + newPath );

    }, function(){});

    console.log( 'You new repo is READY! ENJOY it!' );
}




